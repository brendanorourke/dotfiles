#!/usr/bin/env bash
[[ "$1" == "source" ]] || \

# Various constants.
DEFAULT_USER="$(id -un)"
GITHUB_USER="brendanorourke"

# Where the magic happens.
export DOTFILES=~/.dotfiles

source $(dirname $0)/utils

# Set the prompt delay to be longer for the very first run.
export prompt_delay=5; is_dotfiles_bin || prompt_delay=15

# If this file was being sourced, exit now.
[[ "$1" == "source" ]] && return


# -----------------------------------------
# COPY FILES
# -----------------------------------------

function copy_header() { print_header "Copying files into home directory…"; }

function copy_test() {
  if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
    print_in_yellow "same file"
  elif [[ "$1" -ot "$2" ]]; then
    print_in_yellow "destination file newer"
  fi
}

function copy_do() {
  
  execute \
    "cp "$2" ~/" \
    "$1"

}


# -----------------------------------------
# LINK FILES
# -----------------------------------------

function link_header() { print_header "Linking files into home directory…"; }

function link_test() {
  [[ "$1" -ef "$2" ]] && print_in_yellow "same file"
}

function link_do() {

  execute \
    "ln -sf ${2#$HOME/} ~/" \
    "link $1"

}


# -----------------------------------------
# INITIALIZE SYSTEM
# -----------------------------------------

DOTFILES_SCRIPT_RUNNING=1

function cleanup {
  unset DOTFILES_SCRIPT_RUNNING
}

trap cleanup EXIT

# Cached selections
init_file=$DOTFILES/caches/init/selected

# Prompt to select files from /init/ to run
function init_files() {
  
  local i f dirname oses os opt remove
  
  dirname="$(dirname "$1")"
  f=("$@")
  menu_options=(); menu_selects=()
  
  for i in "${!f[@]}"; do menu_options[i]="$(basename "${f[i]}")"; done
  
  if [[ -e "$init_file" ]]; then
  
    # Read cache file if possible
    IFS=$'\n' read -d '' -r -a menu_selects < "$init_file"
  
  else
  
    # Otherwise default to all scripts not specifically for other OSes
    oses=($(get_os 1))
  
    for opt in "${menu_options[@]}"; do
  
      remove=
  
      for os in "${oses[@]}"; do
  
        [[ "$opt" =~ (^|[^a-z])$os($|[^a-z]) ]] && remove=1 && break
  
      done
  
      [[ "$remove" ]] || menu_selects=("${menu_selects[@]}" "$opt")
  
    done
  
  fi
  
  prompt_menu "Run the following init scripts?" $prompt_delay
  
  # Write out cache file for future reading.
  rm "$init_file" 2>/dev/null
  
  for i in "${!menu_selects[@]}"; do
  
    echo "${menu_selects[i]}" >> "$init_file"
    echo "$dirname/${menu_selects[i]}"
  
  done

}

# Source each file in /init/ directly
function init_do() {

  source "$2"

}

# -----------------------------------------
# HELPER FUNCTIONS
# -----------------------------------------

# Enter password up-front and keepalive
ask_for_sudo

# -----------------------------------------
# REQUIRED PACKAGES
# -----------------------------------------

print_header "Install prerequisites"

# Ensure that we can actually, like, compile anything.
if [[ ! "$(type -P gcc)" ]] && is_osx; then

  print_error "XCode or the Command Line Tools for XCode must be installed first."
  exit 1

fi

# If Git is not installed, install it
# Ubuntu only, since Git comes standard with recent XCode or CLT)
if [[ ! "$(type -P git)" ]] && is_ubuntu; then
  
  execute \
    "sudo apt-get -qq install git-core" \
    "git"

fi

# If curl is not installed, install it (Ubuntu only, curl standard on macOS)
if [[ ! "$(type -P curl)" ]] && is_ubuntu; then
    
  execute \
    "sudo apt-get -qq install curl" \
    "curl" 

fi

# -----------------------------------------
# INITIALIZE DOTFILE ENVIRONMENT
# -----------------------------------------

print_header "Initializing dotfiles"

if [[ ! -d $DOTFILES ]]; then

  git clone --recurse-submodules --quiet git://github.com/$GITHUB_USER/dotfiles.git $DOTFILES
  cd $DOTFILES && print_success "downloaded dotfiles for $GITHUB_USER"

elif [[ "$1" != "restart" ]]; then

  cd $DOTFILES || exit

  prev_head="$(git rev-parse HEAD)"
  git pull --recurse-submodules --quiet
  git submodule update --init --recursive

  if [[ "$(git rev-parse HEAD)" != "$prev_head" ]]; then

    print_warning "Changes detected, restarting script"
    exec "$0" "restart"

  fi

else

  print_success "updated dotfiles for $GITHUB_USER"

fi

# Add binaries into the path
[[ -d $DOTFILES/bin ]] && PATH=$DOTFILES/bin:$PATH
export PATH

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob

# Create caches dir and init subdir, if they don't already exist.
mkdir -p "$DOTFILES/caches/init"

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=""

# -----------------------------------------
# EXECUTE EACH FILE IN PRIMARY DIRS
# -----------------------------------------

do_stuff "copy"
do_stuff "link"
do_stuff "init"

# -----------------------------------------
# MISC ADD-ONS FOR Z-SHELL
# -----------------------------------------

print_header "Installing shell add-ons"

execute \
  "curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh" \
  "oh-my-zsh"

execute \
  "cp $DOTFILES/external/themes/bullet-train.zsh-theme ~/.oh-my-zsh/themes/bullet-train.zsh-theme" \
  "zsh theme: bullet-train"

execute \
  "cp $DOTFILES/external/themes/common.zsh-theme ~/.oh-my-zsh/themes/common.zsh-theme" \
  "zsh theme: common"

# -----------------------------------------
# CLEANUP
# -----------------------------------------

# Alert if backups were made.
if [[ "$backup" ]]; then
  print_in_yellow "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# Complete
print_header "dotfiles execution complete!"
