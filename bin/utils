#!/usr/bin/env bash

###########################################
# CONSTANTS
###########################################

EXCEPTION=101

###########################################
# UTILITY FUNCTIONS
###########################################

# Array filter. Calls filter_fn for each item ($1) and index ($2) in array_name
# array, and prints all values for which filter_fn returns a non-zero exit code
# to stdout. If filter_fn is omitted, input array items that are empty strings
# will be removed.
# Usage: array_filter array_name [filter_fn]
# Eg. mapfile filtered_arr < <(array_filter source_arr)
function array_filter() { __array_filter 1 "$@"; }

# Works like array_filter, but outputs array indices instead of array items.
function array_filter_i() { __array_filter 0 "$@"; }

# The core function. Wheeeee.
function __array_filter() {
  local __i__ __val__ __mode__ __arr__
  
  __mode__=$1; shift; __arr__=$1; shift
  
  for __i__ in $(eval echo "\${!$__arr__[@]}"); do
  
    __val__="$(eval echo "\${$__arr__[__i__]}")"
  
    if [[ "$1" ]]; then
      
      "$@" "$__val__" $__i__ >/dev/null
    
    else
    
      [[ "$__val__" ]]
    
    fi
  
    if [[ "$?" == 0 ]]; then
  
      if [[ $__mode__ == 1 ]]; then
    
        eval echo "\"\${$__arr__[__i__]}\""
    
      else
    
        echo $__i__
    
      fi
  
    fi
  
  done

}

# Array mapper. Calls map_fn for each item ($1) and index ($2) in array, and
# prints whatever map_fn prints. If map_fn is omitted, all input array items
# are printed.
# Usage: array_map array_name [map_fn]
function array_map() {
  
  local __i__ __val__ __arr__=$1; shift
  
  for __i__ in $(eval echo "\${!$__arr__[@]}"); do
  
    __val__="$(eval echo "\"\${$__arr__[__i__]}\"")"
  
    if [[ "$1" ]]; then

      "$@" "$__val__" $__i__

    else

      echo "$__val__"

    fi
  
  done

}

# Ask for the administrator password upfront.
function ask_for_sudo() {

  sudo -v &> /dev/null

  # Update existing `sudo` time stamp until this script has finished.
  # https://gist.github.com/cowboy/3118588
  while true; do
    
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  
  done &> /dev/null &

}

function cmd_exists() {
    command -v "$1" &> /dev/null
}

# File based actions. E.g., copy, link, etc.
function do_stuff() {
  
  local base dest skip
  local files=($DOTFILES/$1/*)
  
  [[ $(declare -f "$1_files") ]] && files=($("$1_files" "${files[@]}"))
  
  # No files? abort.
  if (( ${#files[@]} == 0 )); then return; fi
  
  # Run _header function only if declared.
  [[ $(declare -f "$1_header") ]] && "$1_header"
  
  # Iterate over files.
  for file in "${files[@]}"; do
  
    base="$(basename "$file")"
    dest="$HOME/$base"
  
    # Run _test function only if declared.
    if [[ $(declare -f "$1_test") ]]; then

      # If _test function returns a string, skip file and print that message.
      skip="$("$1_test" "$file" "$dest")"

      if [[ "$skip" ]]; then

        print_warning "skipping $base, $skip"
        continue

      fi

      # Destination file already exists in ~/. Back it up!
      if [[ -e "$dest" ]]; then

        # Set backup flag, so a nice message can be shown at the end.
        backup=1

        # Create backup dir if it doesn't already exist.
        [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"

        # Backup file / link / whatever.
        execute \
          "mv $dest $backup_dir" \
          "backup $dest"

      fi

    fi

    # Do stuff.
    "$1_do" "$base" "$file"
  
  done

}

function execute() {

    local -r CMDS="$1"
    local -r MSG="${2:-$1}"
    local -r TMP_FILE="$(mktemp /tmp/XXXXX)"

    local exitCode=0
    local cmdsPID=""

    # If the current process is ended,
    # also end all its subprocesses.
    set_trap "EXIT" "kill_all_subprocesses"

    # Execute commands in background
    eval "$CMDS" \
        &> /dev/null \
        2> "$TMP_FILE" &

    cmdsPID=$!

    # Show a spinner if the commands
    # require more time to complete.
    show_spinner "$cmdsPID" "$CMDS" "$MSG"

    # Wait for the commands to no longer be executing
    # in the background, and then get their exit code.
    wait "$cmdsPID" &> /dev/null
    exitCode=$?

    # Print output based on what happened.
    print_result $exitCode "$MSG"

    if [ $exitCode -ne 0 ]; then
        print_error_stream < "$TMP_FILE"
    fi

    rm -rf "$TMP_FILE"

    return $exitCode

}

# Check if OS matches supported types
function get_os() {
  
  for os in osx ubuntu ubuntu_desktop; do
  
    is_$os; [[ $? == "${1:-0}" ]] && echo $os
  
  done

}

# Test if this script was run via the "dotfiles" bin script (vs. via curl/wget)
function is_dotfiles_bin() { [[ "$(basename $0 2>/dev/null)" == dotfiles ]] || return 1; }

# Test if the dotfiles script is currently
function is_dotfiles_running() { [[ "$DOTFILES_SCRIPT_RUNNING" ]] || return 1; }

# Current OS is macOS
function is_osx() { [[ "$OSTYPE" =~ ^darwin ]] || return 1; }

# Current OS is Ubuntu (all versions)
function is_ubuntu() { [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1; }

# Current OS is Ubuntu Desktop
function is_ubuntu_desktop() { dpkg -l ubuntu-desktop >/dev/null 2>&1 || return 1; }

function kill_all_subprocesses() {

    local i=""

    for i in $(jobs -p); do
        kill "$i"
        wait "$i" &> /dev/null
    done

}

function print_error() { print_in_red "   [✖] $1 $2\n"; }

function print_error_stream() {
   
  while read -r line; do
   
    print_error "↳ ERROR: $line"
  
  done

}

function print_header() { print_in_purple "\n$1\n\n"; }

function print_in_color() {

    printf "%b" \
        "$(tput setaf "$2" 2> /dev/null)" \
        "$1" \
        "$(tput sgr0 2> /dev/null)"

}

function print_in_green()  { print_in_color "$1" 2; }
function print_in_purple() { print_in_color "$1" 5; }
function print_in_red()    { print_in_color "$1" 1; }
function print_in_yellow() { print_in_color "$1" 3; }
#

function print_result() {

    if [ "$1" -eq 0 ]; then
        print_success "$2"
    else
        print_error "$2"
    fi

    return "$1"

}

function print_success() {
    print_in_green "   [✔] $1\n"
}

function print_warning() {
    print_in_yellow "   [!] $1\n"
}

# Display a fancy multi-select menu. (http://serverfault.com/a/298312)

function prompt_header()   { echo -e "\n\033[1m$@…\033[0m"; }
function prompt_success()  { echo -e "   \033[00;32m✔\033[0m  $@"; }
function prompt_error()    { echo -e "   \033[00;31m✖\033[0m  $@"; }
function prompt_arrow()    { echo -e "   \033[00;34m➜\033[0m  $@"; }

function prompt_menu() {
  
  local exitcode prompt choices nums i n
  
  exitcode=0
  
  if [[ "$2" ]]; then
  
    _prompt_menu_draws "$1"
    echo "\n"
    read -t $2 -n 1 -sp "Press ENTER or wait $2 seconds to continue, or press any other key to edit."
    exitcode=$?
    echo ""
  
  fi 1>&2
  
  if [[ "$exitcode" == 0 && "$REPLY" ]]; then
  
    prompt="Toggle options (Separate options with spaces, ENTER when done): "
  
    while _prompt_menu_draws "$1" 1 && read -rp "$prompt" nums && [[ "$nums" ]]; do
  
      _prompt_menu_adds $nums
  
    done
  
  fi 1>&2
  
  _prompt_menu_adds

}

function _prompt_menu_iter() {
  
  local i sel state
  local fn=$1; shift
  
  for i in "${!menu_options[@]}"; do
  
    state=0
  
    for sel in "${menu_selects[@]}"; do
  
      [[ "$sel" == "${menu_options[i]}" ]] && state=1 && break
  
    done
  
    $fn $state $i "$@"
  
  done

}

function _prompt_menu_draws() {

  prompt_header "\n$1\n"
  _prompt_menu_iter _prompt_menu_draw "$2"

}

function _prompt_menu_draw() {
  
  local modes=(error success)
  
  if [[ "$3" ]]; then
  
    prompt_${modes[$1]} "$(printf "%2d) %s\n" $(($2+1)) "${menu_options[$2]}")"
  
  else
    
    prompt_${modes[$1]} "${menu_options[$2]}"
  
  fi

}

function _prompt_menu_adds() {

  _prompt_menu_result=()
  _prompt_menu_iter _prompt_menu_add "$@"
  menu_selects=("${_prompt_menu_result[@]}")

}

function _prompt_menu_add() {
  
  local state i n keep match
  
  state=$1; shift
  i=$1; shift
  
  for n in "$@"; do
  
    if [[ $n =~ ^[0-9]+$ ]] && (( n-1 == i )); then
  
      match=1; [[ "$state" == 0 ]] && keep=1
  
    fi
  
  done
  
  [[ ! "$match" && "$state" == 1 || "$keep" ]] || return
  
  _prompt_menu_result=("${_prompt_menu_result[@]}" "${menu_options[i]}")

}

# Given strings containing space-delimited words A and B, "setdiff A B" will
# return all words in A that do not exist in B. (http://stackoverflow.com/a/1617303/142339)
function setdiff() {
  local debug skip a b
  
  if [[ "$1" == 1 ]]; then debug=1; shift; fi
  
  if [[ "$1" ]]; then
  
    local setdiffA setdiffB setdiffC
    setdiffA=($1); setdiffB=($2)
  
  fi
  
  setdiffC=()
  
  for a in "${setdiffA[@]}"; do
  
    skip=
  
    for b in "${setdiffB[@]}"; do
  
      [[ "$a" == "$b" ]] && skip=1 && break
  
    done
    
    [[ "$skip" ]] || setdiffC=("${setdiffC[@]}" "$a")
  
  done
  
  [[ "$debug" ]] && for a in setdiffA setdiffB setdiffC; do
    
    echo "$a ($(eval echo "\${#$a[*]}")) $(eval echo "\${$a[*]}")" 1>&2
  
  done
  
  [[ "$1" ]] && echo "${setdiffC[@]}"

}

function set_trap() {

  trap -p "$1" | grep "$2" &> /dev/null \
    || trap '$2' "$1"

}

function show_spinner() {

  local -r FRAMES='/-\|'

  # shellcheck disable=SC2034
  local -r NUMBER_OR_FRAMES=${#FRAMES}

  local -r CMDS="$2"
  local -r MSG="$3"
  local -r PID="$1"

  local i=0
  local frameText=""

  # Provide more space so that the text hopefully
  # doesn't reach the bottom line of the terminal window.
  #
  # This is a workaround for escape sequences not tracking
  # the buffer position (accounting for scrolling).
  #
  # See also: https://unix.stackexchange.com/a/278888

  printf "\n\n\n"
  tput cuu 3
  tput sc

  # Display spinner while the commands are being executed.
  while kill -0 "$PID" &>/dev/null; do

    frameText="   [${FRAMES:i++%NUMBER_OR_FRAMES:1}] $MSG"

    # Print frame text.
    printf "%s\n" "$frameText"

    sleep 0.2

    # Clear frame text.
    tput rc

  done
}
